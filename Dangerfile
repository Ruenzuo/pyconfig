# Sometimes it's a README fix, or something like that - which isn't relevant for
# including in a project's CHANGELOG for example
declared_trivial = pr_title.include? "#trivial"

# Make it more obvious that a PR is a work in progress and shouldn't be merged yet
warn("PR is classed as Work in Progress") if pr_title.include? "[WIP]"

# Warn when there is a big PR
warn("Big PR") if lines_of_code > 75

def didModify(files_array)
  did_modify_files = false
  files_array.each do |file_name|
    if modified_files.include?(file_name) || deleted_files.include?(file_name)
      did_modify_files = true
    end
  end
  return did_modify_files
end

# Warn when the build system files see changes
build_files = ["Makefile", "Gemfile", "Dangerfile", "circle.yml", ".codeclimate.yml", "tox.ini", "pylintrc"]
warn("Changes to build files") if didModify(build_files)

# Warn when changing the requirements files
req_files = ["requirements.txt", "setup.py"]
warn("Changes to installation requirements files") if didModify(req_files)

# Fail if changes to License or CoC
special_files = ["LICENSE", "contributing.md", "contributing/code-of-conduct.md"]
fail("Do not modify the license or Code of Conduct") if didModify(special_files)

# put labels on PRs
fail("PR needs labels", sticky: true) if pr_labels.empty?

# if we are on CI, then post the 
username = ENV['CIRCLE_PROJECT_USERNAME']
project_name = ENV['CIRCLE_PROJECT_REPONAME']
build_number = ENV['CIRCLE_BUILD_NUM']
should_display_message = username && project_name && build_number
if should_display_message
  # submit message giving the coverage report that was generated by coverage.py
  message('[html coverage report](https://circleci.com/api/v1/project/'+username+'/'+project_name+'/'+build_number+'/artifacts/0/$CIRCLE_ARTIFACTS/htmlcov/index.html)'+' & '+'[linter report](https://circleci.com/api/v1/project/'+username+'/'+project_name+'/'+build_number+'/artifacts/0/$CIRCLE_ARTIFACTS/lint_output.txt)')
end