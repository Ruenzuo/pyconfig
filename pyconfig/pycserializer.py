# Copyright (c) 2016, Samantha Marshall (http://pewpewthespells.com)
# All rights reserved.
#
# https://github.com/samdmarshall/pyconfig
# 
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this 
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# 3. Neither the name of Samantha Marshall nor the names of its contributors may 
# be used to endorse or promote products derived from this software without 
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
# OF THE POSSIBILITY OF SUCH DAMAGE.

from pyconfig.version import __version__ as PYCONFIG_VERSION
import os
import pyparsing
from . import pyckeyword

def openOutputFileToWrite(input_string):
    file_path = os.path.expanduser(input_string)
    parent_path = os.path.dirname(file_path)
    if os.path.exists(parent_path) == False:
        os.makedirs(parent_path)
    return open(file_path, 'w')

def writeFile(pyconfig_contents=None, config_file_path=None, scheme_name=None):

    if pyconfig_contents and config_file_path:
        
        output_file_path = os.path.dirname(config_file_path)
        if pyconfig_contents[0][0] == pyckeyword._export:
            relative_path = pyconfig_contents[0][1][1:-1]
            output_file_path = os.path.join(output_file_path, relative_path)
        else:
            name, extension = os.path.splitext(config_file_path)
            output_file_path = name + '.xcconfig'
        
        output_file = openOutputFileToWrite(output_file_path)
        output_file.write('// Generated by pyconfig ' + PYCONFIG_VERSION + '\n')
        output_file.write('//  ' + config_file_path + '\n')
        
        if scheme_name != None:
            output_file.write('SCHEME_NAME = ' + scheme_name + '\n')
        
        for item_array in pyconfig_contents:
            if item_array[0] == pyckeyword._export:
                continue
            else:
                for item in item_array:
                    if item[0] == pyckeyword._include:
                        output_file.write('#include ' + item[1] + '\n')
                    if item[0] == pyckeyword._setting:
                        uses_configuration_specific_settings = False
                        inherited_settings = ''
                        substitution_variable_name = 'CONFIGURATION'
                        build_setting_name = item[1]
                        modifiers = item[2]
                        configurations = item[3]
                        if len(modifiers) > 0:
                            if modifiers[0] == pyckeyword._use:
                                substitution_variable_name = modifiers[1]
                            if modifiers[0] == pyckeyword._inherits \
                                or (len(modifiers) == 3 and modifiers[2] == pyckeyword._inherits):
                                inherited_settings = '$(inherited) '
                        for config in configurations:
                            configuration_type = config[0]
                            if configuration_type == pyckeyword._for:
                                configuration_name = config[1]
                                configuration_value_string = ''
                                if len(config) > 2:
                                    configuration_value_string = ' '.join(config[2])
                                if configuration_name.startswith(pyckeyword._specialCase, 0, 1):
                                    configuration_name = ''
                                else:
                                    uses_configuration_specific_settings = True
                                    configuration_name = '_' + configuration_name
                                output_file.write(build_setting_name + configuration_name + ' = ' + inherited_settings + configuration_value_string + '\n')
                            if configuration_type == pyckeyword._if:
                                conditions = config[1]
                                assignment_value = config[2]
                                conditional_key_value_list = list()
                                for condition in conditions:
                                    conditional_key_value_list.append('='.join(condition))
                                conditional_key_value_string = ','.join(conditional_key_value_list)
                                output_file.write(build_setting_name + '[' + conditional_key_value_string + '] = ' + inherited_settings + assignment_value + '\n')
                        if uses_configuration_specific_settings:
                            output_file.write(build_setting_name + ' = ' + inherited_settings + '$(' + build_setting_name + '_$(' + substitution_variable_name + '))' + '\n')
