# Copyright (c) 2016, Samantha Marshall (http://pewpewthespells.com)
# All rights reserved.
#
# https://github.com/samdmarshall/pyconfig
# 
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this 
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
# 
# 3. Neither the name of Samantha Marshall nor the names of its contributors may 
# be used to endorse or promote products derived from this software without 
# specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
# OF THE POSSIBILITY OF SUCH DAMAGE.

import pyparsing
from . import pyckeyword

def writeFile(pyconfig_contents=None, output_file=None, scheme_name=None):

    if pyconfig_contents and output_file:
        output_file.write('// Generated by pyconfig\n')
        
        # if the scheme name was defined as part of the passed arguments then declare a new variable with that name as part of the xcconfig
        if scheme_name != None:
            output_file.write('SCHEME_NAME = ' + scheme_name + '\n')
        
        for setting in pyconfig_contents:
            # if the resulting object is a plain string, then this was one of the parsed include statements
            if type(setting) == str:
                output_file.write('#include ' + setting + '\n')
            
            # if the resulting object is a parsed result from pyparsing, this is one of the build setting definitions
            if type(setting) == pyparsing.ParseResults:
                inherited_settings = ''
                base_setting_name = setting[0]
                uses_configuration_specific_settings = False
                substitution_variable_name = 'CONFIGURATION'
                configurations = setting[2]
                if len(setting[1]) > 0:
                    modifiers = setting[1]
                    if modifiers[0] == pyckeyword._use:
                        substitution_variable_name = modifiers[1]
                    if modifiers[0] == pyckeyword._inherits:
                        inherited_settings = '$(inherited) '
                    if len(modifiers) == 3:
                        if modifiers[2] == pyckeyword._inherits:
                            inherited_settings = '$(inherited) '
                for configuration in configurations:
                    configuration_type = configuration[0]
                    if configuration_type == pyckeyword._for:
                        configuration_name = configuration[1]
                        configuration_value_string = ''
                        if len(configuration) > 2:
                            configuration_value_string = ' '.join(configuration[2])
                        if configuration_name.startswith(pyckeyword._specialCase, 0, 1):
                            configuration_name = ''
                        else:
                            uses_configuration_specific_settings = True
                            configuration_name = '_'+configuration_name
                        output_file.write(base_setting_name + configuration_name + ' = ' + inherited_settings + configuration_value_string + '\n')
                    if configuration_type == pyckeyword._if:
                        conditions = configuration[1]
                        assignment_value = configuration[2]
                        conditional_key_value_list = list()
                        for condition in conditions:
                            conditional_key_value_list.append('='.join(condition))
                        conditional_key_value_string = ','.join(conditional_key_value_list)
                        output_file.write(base_setting_name + '[' + conditional_key_value_string + '] = ' + inherited_settings + assignment_value + '\n')
                if uses_configuration_specific_settings:
                    output_file.write(base_setting_name + ' = ' + inherited_settings + '$(' + base_setting_name + '_$(' + substitution_variable_name + '))' + '\n')
